services:
  worker:
    container_name: weld_worker
    build:
      context: .
      dockerfile: dev.Dockerfile
    command: 'tail -f /dev/null'
    environment:
      WORKER_HOST: ${WORKER_HOST}
      WORKER_TCP_PORT: ${WORKER_TCP_PORT}
      APP_HOST: ${APP_HOST}
      APP_HTTP_PORT: ${APP_HTTP_PORT}
      APP_TCP_PORT: ${APP_TCP_PORT}
      IQAIR_API_KEY: ${IQAIR_API_KEY}
    volumes:
      - ./:/app
    networks:
      - weld

  minio:
    image: minio/minio
    container_name: weld_minio
    restart: on-failure
    ports:
      - ${MINIO_PORT}:9000
      - ${MINIO_CONSOLE_PORT}:9001
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    healthcheck:
      test: ['CMD', 'curl', 'http://weld_minio:9000']
      interval: 30s
      timeout: 10s
      start_period: 15s
    command: server /data --console-address ":9001"
    volumes:
      - minio_datastore:/data
    networks:
      - weld

  postgres:
    image: postgres:alpine
    container_name: weld_postgres
    restart: on-failure
    environment:
      POSTGRES_USER: ${POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_DB: ${POSTGRESQL_DB}
    healthcheck:
      test:
        [
          'CMD',
          'echo',
          "'SELECT 1'",
          '|',
          'psql',
          '--host=127.0.0.1',
          '--username=${POSTGRESQL_USER}',
          '-w',
          '--dbname=${POSTGRESQL_DB}',
          '--quiet',
          '--no-align',
          '--tuples-only',
        ]
      interval: 30s
      timeout: 10s
      start_period: 15s
    volumes:
      - postgres_datastore:/var/lib/postgresql/data
    networks:
      - weld

networks:
  weld:
    name: weld
    driver: bridge

volumes:
  postgres_datastore:
  minio_datastore:
